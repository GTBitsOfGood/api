// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v3.12.4
// source: counter.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "juno.counter";

export interface IncrementCounterRequest {
}

export interface IncrementCounterResponse {
}

export interface DecrementCounterRequest {
}

export interface DecrementCounterResponse {
}

export interface ResetCounterRequest {
}

export interface ResetCounterResponse {
}

export interface GetCounterRequest {
}

export interface GetCounterResponse {
  response: number;
}

export const JUNO_COUNTER_PACKAGE_NAME = "juno.counter";

export interface CounterServiceClient {
  incrementCounter(request: IncrementCounterRequest): Observable<IncrementCounterResponse>;

  decrementCounter(request: IncrementCounterRequest): Observable<IncrementCounterResponse>;

  resetCounter(request: IncrementCounterRequest): Observable<IncrementCounterResponse>;

  getCounter(request: IncrementCounterRequest): Observable<IncrementCounterResponse>;
}

export interface CounterServiceController {
  incrementCounter(
    request: IncrementCounterRequest,
  ): Promise<IncrementCounterResponse> | Observable<IncrementCounterResponse> | IncrementCounterResponse;

  decrementCounter(
    request: IncrementCounterRequest,
  ): Promise<IncrementCounterResponse> | Observable<IncrementCounterResponse> | IncrementCounterResponse;

  resetCounter(
    request: IncrementCounterRequest,
  ): Promise<IncrementCounterResponse> | Observable<IncrementCounterResponse> | IncrementCounterResponse;

  getCounter(
    request: IncrementCounterRequest,
  ): Promise<IncrementCounterResponse> | Observable<IncrementCounterResponse> | IncrementCounterResponse;
}

export function CounterServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["incrementCounter", "decrementCounter", "resetCounter", "getCounter"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("CounterService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("CounterService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const COUNTER_SERVICE_NAME = "CounterService";
