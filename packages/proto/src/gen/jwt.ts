// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v5.28.3
// source: jwt.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices';
import { Observable } from 'rxjs';
import { ApiKey } from './auth_common';

export const protobufPackage = 'juno.jwt';

export interface CreateJwtRequest {
  apiKey: string;
}

export interface CreateJwtResponse {
  jwt: string;
}

export interface ValidateJwtRequest {
  jwt: string;
}

export interface ValidateJwtResponse {
  valid: boolean;
  apiKey?: ApiKey | undefined;
}

export const JUNO_JWT_PACKAGE_NAME = 'juno.jwt';

export interface JwtServiceClient {
  createJwt(request: CreateJwtRequest): Observable<CreateJwtResponse>;

  validateJwt(request: ValidateJwtRequest): Observable<ValidateJwtResponse>;
}

export interface JwtServiceController {
  createJwt(
    request: CreateJwtRequest,
  ):
    | Promise<CreateJwtResponse>
    | Observable<CreateJwtResponse>
    | CreateJwtResponse;

  validateJwt(
    request: ValidateJwtRequest,
  ):
    | Promise<ValidateJwtResponse>
    | Observable<ValidateJwtResponse>
    | ValidateJwtResponse;
}

export function JwtServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ['createJwt', 'validateJwt'];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcMethod('JwtService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcStreamMethod('JwtService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
  };
}

export const JWT_SERVICE_NAME = 'JwtService';
