services:
  api-gateway:
    build:
      dockerfile: Dockerfile.dev
      target: api-gateway-dev
      context: .
    ports:
      - 3000
    entrypoint: yarn ${GATEWAY_COMMAND-start:dev}
    environment:
      DB_SERVICE_ADDR: db-service:5000
      AUTH_SERVICE_ADDR: auth-service:5000
    networks:
      - bog-api-net
    depends_on:
      auth-service:
        condition: service_healthy

  auth-service:
    build:
      dockerfile: Dockerfile.dev
      target: auth-service-dev
      context: .
    ports:
      - 5000
    entrypoint: yarn ${AUTH_COMMAND-start:dev}
    environment:
      AUTH_SERVICE_ADDR: auth-service:5000
      DB_SERVICE_ADDR: db-service:5000
    networks:
      - bog-api-net
    depends_on:
      db-service:
        condition: service_healthy
    healthcheck:
      test: ['CMD-SHELL', 'grpc_health_probe -addr=auth-service:5000']
      interval: 2s
      timeout: 10s
      retries: 10

  db-service:
    build:
      dockerfile: Dockerfile.dev
      target: db-service-dev
      context: .
    ports:
      - 5000
    entrypoint: /bin/sh -c "DB_COMMAND=${DB_COMMAND-start:dev} RUN_MODE=${RUN_MODE-dev} ./entrypoint.sh"
    environment:
      AUTH_SERVICE_ADDR: auth-service:5000
      DB_SERVICE_ADDR: db-service:5000
      DATABASE_URL: postgresql://user:password@db
      NODE_ENV: test
    networks:
      - bog-api-net
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ['CMD-SHELL', 'grpc_health_probe -addr=db-service:5000']
      interval: 2s
      timeout: 10s
      retries: 10

  db:
    image: postgres
    restart: always
    ports:
      - 5432
    environment:
      POSTGRES_PASSWORD: password
      POSTGRES_USER: user
    networks:
      - bog-api-net
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U user']
      interval: 2s
      timeout: 5s
      retries: 10

networks:
  bog-api-net:
    driver: bridge
